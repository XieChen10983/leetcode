1. 给定三个字符串s1、s2和s3，判断s3是否是由s1和s2交错组成的
    解法：使用动态规划解决，设f(i, j)表示s1的前i个元素和s2的前j个元素是否能够交错组成s3的前i+j个元素。则有以下转移方程：
        f(i, j) = (f(i - 1, j) and s1[i - 1] == s3[i + j - 1]) or (f(i, j - 1) and s2[j - 1] == s3[i + j - 1])
        初始方程为：f(0, 0) = true;

2. 给定一个二叉树的节点root，返回它的中序遍历
    解法：首先使用栈保存所有左路节点，然后不断弹出存入且存入右节点的所有左路节点

3. 给定一个非空数组，除了某个元素只出现一次之外，其余的元素均出现了三次。找出只出现了一次的元素
    解法：可以使用哈希表。如果不使用额外空间，可以设置一个seenOnce和一个seenTwice，仅当seenTwice没有改变的时候改变seen_once.仅当seenOnce没有改变的时候改变seenTwice